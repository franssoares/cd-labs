-- Bibliotecas
LIBRARY ieee;
USE ieee.std_logic_1164.all;

-- Entidade
ENTITY counter_wload_6 IS

    -- Constante
    GENERIC(
        w : INTEGER := 5
    );

    port(
       in_data : IN STD_LOGIC_VECTOR(w DOWNTO 0);
       out_data : OUT STD_LOGIC_VECTOR(w DOWNTO 0);
       clk, load : IN STD_LOGIC
    );

END ENTITY counter_wload_6;

-- Arquitetura
ARCHITECTURE bhv OF counter_wload_6 IS

    -- Componentes

        --MUX
        COMPONENT mux_2x1 IS 
            GENERIC(
                w : INTEGER := 5
            );
            PORT(
                i0, i1 : IN STD_LOGIC_VECTOR(w DOWNTO 0);
                sel : IN STD_LOGIC;
                o : OUT STD_LOGIC_VECTOR(w DOWNTO 0)
            );
        END COMPONENT mux_2x1;
        
        --INCREMENTER
        COMPONENT incrementer_6 IS
            GENERIC(
                w : INTEGER := 5
            );
            port(
                in_data : in STD_LOGIC_VECTOR(w DOWNTO 0);
                out_data : out STD_LOGIC_VECTOR(w DOWNTO 0)
            );
        END COMPONENT incrementer_6;

        --COMPARATOR
        COMPONENT comparator_6 IS
            GENERIC(
                w : INTEGER := 5
            );
            port(
                a : IN STD_LOGIC_VECTOR(w DOWNTO 0);
                b : IN STD_LOGIC_VECTOR(w DOWNTO 0);
                eq : OUT STD_LOGIC
            );
        END COMPONENT comparator_6;

        --REGISTER
        COMPONENT reg_ff_d_6bits IS
            GENERIC(
                tam : integer :=5
            );
            PORT(
                D_reg : IN STD_LOGIC_VECTOR(tam DOWNTO 0);
                clk_reg, load : IN STD_LOGIC;
                Q_reg, Q_bar_reg : OUT STD_LOGIC_VECTOR(tam DOWNTO 0)
            );
        END COMPONENT reg_ff_d_6bits;

    -- Fios
    SIGNAL wires : STD_LOGIC_VECTOR(w DOWNTO 0);

-- Comportamento:
BEGIN
    -- Instancias
    mux0 : mux_2x1
    PORT MAP(
        i0 => in_data, -- 00000000...
        i1 => wire(0), -- fio de retorno do incrementador
        sel => wire(1), -- fio para resetar
        o => wire(2)  -- fio que vai para o registrador
    );

    6_bit_register : reg_6
    PORT MAP(
        D_reg => wire(2), --ok
        clk_reg => clk,
        load => wire(1),
        Q_reg => wire(3),
        Q_reg_bar => open
    );

    adder0 : incrementer_6
    PORT MAP(
        in_data => wire(3),
        out_data => wire(0) --ok
    );

    comp0 : comparator_6
    POR MAP(
        a => wire(3),
        b => '111011',
        eq => wire(1)
    );

END ARCHITECTURE bhv;