// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/16/2023 11:36:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_vlg_sample_tst(
	alu_s0,
	alu_s1,
	clk,
	data_ram_in,
	RF_Rp_addr,
	RF_Rp_rd,
	RF_Rq_addr,
	RF_Rq_rd,
	RF_s0,
	RF_s1,
	RF_W_addr,
	RF_W_data,
	RF_W_wr,
	sampler_tx
);
input  alu_s0;
input  alu_s1;
input  clk;
input [15:0] data_ram_in;
input [3:0] RF_Rp_addr;
input  RF_Rp_rd;
input [3:0] RF_Rq_addr;
input  RF_Rq_rd;
input  RF_s0;
input  RF_s1;
input [3:0] RF_W_addr;
input [7:0] RF_W_data;
input  RF_W_wr;
output sampler_tx;

reg sample;
time current_time;
always @(alu_s0 or alu_s1 or clk or data_ram_in or RF_Rp_addr or RF_Rp_rd or RF_Rq_addr or RF_Rq_rd or RF_s0 or RF_s1 or RF_W_addr or RF_W_data or RF_W_wr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module datapath_vlg_check_tst (
	alu_comp_gt,
	data_ram_out,
	RF_Rp_zero,
	sampler_rx
);
input  alu_comp_gt;
input [15:0] data_ram_out;
input  RF_Rp_zero;
input sampler_rx;

reg  alu_comp_gt_expected;
reg [15:0] data_ram_out_expected;
reg  RF_Rp_zero_expected;

reg  alu_comp_gt_prev;
reg [15:0] data_ram_out_prev;
reg  RF_Rp_zero_prev;

reg  alu_comp_gt_expected_prev;
reg [15:0] data_ram_out_expected_prev;
reg  RF_Rp_zero_expected_prev;

reg  last_alu_comp_gt_exp;
reg [15:0] last_data_ram_out_exp;
reg  last_RF_Rp_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_comp_gt_prev = alu_comp_gt;
	data_ram_out_prev = data_ram_out;
	RF_Rp_zero_prev = RF_Rp_zero;
end

// update expected /o prevs

always @(trigger)
begin
	alu_comp_gt_expected_prev = alu_comp_gt_expected;
	data_ram_out_expected_prev = data_ram_out_expected;
	RF_Rp_zero_expected_prev = RF_Rp_zero_expected;
end


// expected data_ram_out[ 15 ]
initial
begin
	data_ram_out_expected[15] = 1'bX;
end 
// expected data_ram_out[ 14 ]
initial
begin
	data_ram_out_expected[14] = 1'bX;
end 
// expected data_ram_out[ 13 ]
initial
begin
	data_ram_out_expected[13] = 1'bX;
end 
// expected data_ram_out[ 12 ]
initial
begin
	data_ram_out_expected[12] = 1'bX;
end 
// expected data_ram_out[ 11 ]
initial
begin
	data_ram_out_expected[11] = 1'bX;
end 
// expected data_ram_out[ 10 ]
initial
begin
	data_ram_out_expected[10] = 1'bX;
end 
// expected data_ram_out[ 9 ]
initial
begin
	data_ram_out_expected[9] = 1'bX;
end 
// expected data_ram_out[ 8 ]
initial
begin
	data_ram_out_expected[8] = 1'bX;
end 
// expected data_ram_out[ 7 ]
initial
begin
	data_ram_out_expected[7] = 1'bX;
end 
// expected data_ram_out[ 6 ]
initial
begin
	data_ram_out_expected[6] = 1'bX;
end 
// expected data_ram_out[ 5 ]
initial
begin
	data_ram_out_expected[5] = 1'bX;
end 
// expected data_ram_out[ 4 ]
initial
begin
	data_ram_out_expected[4] = 1'bX;
end 
// expected data_ram_out[ 3 ]
initial
begin
	data_ram_out_expected[3] = 1'bX;
end 
// expected data_ram_out[ 2 ]
initial
begin
	data_ram_out_expected[2] = 1'bX;
end 
// expected data_ram_out[ 1 ]
initial
begin
	data_ram_out_expected[1] = 1'bX;
end 
// expected data_ram_out[ 0 ]
initial
begin
	data_ram_out_expected[0] = 1'bX;
end 

// expected alu_comp_gt
initial
begin
	alu_comp_gt_expected = 1'bX;
end 

// expected RF_Rp_zero
initial
begin
	RF_Rp_zero_expected = 1'bX;
end 
// generate trigger
always @(alu_comp_gt_expected or alu_comp_gt or data_ram_out_expected or data_ram_out or RF_Rp_zero_expected or RF_Rp_zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_comp_gt = %b | expected data_ram_out = %b | expected RF_Rp_zero = %b | ",alu_comp_gt_expected_prev,data_ram_out_expected_prev,RF_Rp_zero_expected_prev);
	$display("| real alu_comp_gt = %b | real data_ram_out = %b | real RF_Rp_zero = %b | ",alu_comp_gt_prev,data_ram_out_prev,RF_Rp_zero_prev);
`endif
	if (
		( alu_comp_gt_expected_prev !== 1'bx ) && ( alu_comp_gt_prev !== alu_comp_gt_expected_prev )
		&& ((alu_comp_gt_expected_prev !== last_alu_comp_gt_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_comp_gt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_comp_gt_expected_prev);
		$display ("     Real value = %b", alu_comp_gt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_comp_gt_exp = alu_comp_gt_expected_prev;
	end
	if (
		( data_ram_out_expected_prev[0] !== 1'bx ) && ( data_ram_out_prev[0] !== data_ram_out_expected_prev[0] )
		&& ((data_ram_out_expected_prev[0] !== last_data_ram_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[0] = data_ram_out_expected_prev[0];
	end
	if (
		( data_ram_out_expected_prev[1] !== 1'bx ) && ( data_ram_out_prev[1] !== data_ram_out_expected_prev[1] )
		&& ((data_ram_out_expected_prev[1] !== last_data_ram_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[1] = data_ram_out_expected_prev[1];
	end
	if (
		( data_ram_out_expected_prev[2] !== 1'bx ) && ( data_ram_out_prev[2] !== data_ram_out_expected_prev[2] )
		&& ((data_ram_out_expected_prev[2] !== last_data_ram_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[2] = data_ram_out_expected_prev[2];
	end
	if (
		( data_ram_out_expected_prev[3] !== 1'bx ) && ( data_ram_out_prev[3] !== data_ram_out_expected_prev[3] )
		&& ((data_ram_out_expected_prev[3] !== last_data_ram_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[3] = data_ram_out_expected_prev[3];
	end
	if (
		( data_ram_out_expected_prev[4] !== 1'bx ) && ( data_ram_out_prev[4] !== data_ram_out_expected_prev[4] )
		&& ((data_ram_out_expected_prev[4] !== last_data_ram_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[4] = data_ram_out_expected_prev[4];
	end
	if (
		( data_ram_out_expected_prev[5] !== 1'bx ) && ( data_ram_out_prev[5] !== data_ram_out_expected_prev[5] )
		&& ((data_ram_out_expected_prev[5] !== last_data_ram_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[5] = data_ram_out_expected_prev[5];
	end
	if (
		( data_ram_out_expected_prev[6] !== 1'bx ) && ( data_ram_out_prev[6] !== data_ram_out_expected_prev[6] )
		&& ((data_ram_out_expected_prev[6] !== last_data_ram_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[6] = data_ram_out_expected_prev[6];
	end
	if (
		( data_ram_out_expected_prev[7] !== 1'bx ) && ( data_ram_out_prev[7] !== data_ram_out_expected_prev[7] )
		&& ((data_ram_out_expected_prev[7] !== last_data_ram_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[7] = data_ram_out_expected_prev[7];
	end
	if (
		( data_ram_out_expected_prev[8] !== 1'bx ) && ( data_ram_out_prev[8] !== data_ram_out_expected_prev[8] )
		&& ((data_ram_out_expected_prev[8] !== last_data_ram_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[8] = data_ram_out_expected_prev[8];
	end
	if (
		( data_ram_out_expected_prev[9] !== 1'bx ) && ( data_ram_out_prev[9] !== data_ram_out_expected_prev[9] )
		&& ((data_ram_out_expected_prev[9] !== last_data_ram_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[9] = data_ram_out_expected_prev[9];
	end
	if (
		( data_ram_out_expected_prev[10] !== 1'bx ) && ( data_ram_out_prev[10] !== data_ram_out_expected_prev[10] )
		&& ((data_ram_out_expected_prev[10] !== last_data_ram_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[10] = data_ram_out_expected_prev[10];
	end
	if (
		( data_ram_out_expected_prev[11] !== 1'bx ) && ( data_ram_out_prev[11] !== data_ram_out_expected_prev[11] )
		&& ((data_ram_out_expected_prev[11] !== last_data_ram_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[11] = data_ram_out_expected_prev[11];
	end
	if (
		( data_ram_out_expected_prev[12] !== 1'bx ) && ( data_ram_out_prev[12] !== data_ram_out_expected_prev[12] )
		&& ((data_ram_out_expected_prev[12] !== last_data_ram_out_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[12] = data_ram_out_expected_prev[12];
	end
	if (
		( data_ram_out_expected_prev[13] !== 1'bx ) && ( data_ram_out_prev[13] !== data_ram_out_expected_prev[13] )
		&& ((data_ram_out_expected_prev[13] !== last_data_ram_out_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[13] = data_ram_out_expected_prev[13];
	end
	if (
		( data_ram_out_expected_prev[14] !== 1'bx ) && ( data_ram_out_prev[14] !== data_ram_out_expected_prev[14] )
		&& ((data_ram_out_expected_prev[14] !== last_data_ram_out_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[14] = data_ram_out_expected_prev[14];
	end
	if (
		( data_ram_out_expected_prev[15] !== 1'bx ) && ( data_ram_out_prev[15] !== data_ram_out_expected_prev[15] )
		&& ((data_ram_out_expected_prev[15] !== last_data_ram_out_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_ram_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_ram_out_expected_prev);
		$display ("     Real value = %b", data_ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_ram_out_exp[15] = data_ram_out_expected_prev[15];
	end
	if (
		( RF_Rp_zero_expected_prev !== 1'bx ) && ( RF_Rp_zero_prev !== RF_Rp_zero_expected_prev )
		&& ((RF_Rp_zero_expected_prev !== last_RF_Rp_zero_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_zero_expected_prev);
		$display ("     Real value = %b", RF_Rp_zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RF_Rp_zero_exp = RF_Rp_zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg alu_s0;
reg alu_s1;
reg clk;
reg [15:0] data_ram_in;
reg [3:0] RF_Rp_addr;
reg RF_Rp_rd;
reg [3:0] RF_Rq_addr;
reg RF_Rq_rd;
reg RF_s0;
reg RF_s1;
reg [3:0] RF_W_addr;
reg [7:0] RF_W_data;
reg RF_W_wr;
// wires                                               
wire alu_comp_gt;
wire [15:0] data_ram_out;
wire RF_Rp_zero;

wire sampler;                             

// assign statements (if any)                          
datapath i1 (
// port map - connection between master ports and signals/registers   
	.alu_comp_gt(alu_comp_gt),
	.alu_s0(alu_s0),
	.alu_s1(alu_s1),
	.clk(clk),
	.data_ram_in(data_ram_in),
	.data_ram_out(data_ram_out),
	.RF_Rp_addr(RF_Rp_addr),
	.RF_Rp_rd(RF_Rp_rd),
	.RF_Rp_zero(RF_Rp_zero),
	.RF_Rq_addr(RF_Rq_addr),
	.RF_Rq_rd(RF_Rq_rd),
	.RF_s0(RF_s0),
	.RF_s1(RF_s1),
	.RF_W_addr(RF_W_addr),
	.RF_W_data(RF_W_data),
	.RF_W_wr(RF_W_wr)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// data_ram_in[ 15 ]
initial
begin
	data_ram_in[15] = 1'b0;
end 
// data_ram_in[ 14 ]
initial
begin
	data_ram_in[14] = 1'b0;
end 
// data_ram_in[ 13 ]
initial
begin
	data_ram_in[13] = 1'b0;
end 
// data_ram_in[ 12 ]
initial
begin
	data_ram_in[12] = 1'b0;
end 
// data_ram_in[ 11 ]
initial
begin
	data_ram_in[11] = 1'b0;
end 
// data_ram_in[ 10 ]
initial
begin
	data_ram_in[10] = 1'b0;
end 
// data_ram_in[ 9 ]
initial
begin
	data_ram_in[9] = 1'b0;
end 
// data_ram_in[ 8 ]
initial
begin
	data_ram_in[8] = 1'b0;
end 
// data_ram_in[ 7 ]
initial
begin
	data_ram_in[7] = 1'b0;
end 
// data_ram_in[ 6 ]
initial
begin
	data_ram_in[6] = 1'b1;
end 
// data_ram_in[ 5 ]
initial
begin
	data_ram_in[5] = 1'b1;
end 
// data_ram_in[ 4 ]
initial
begin
	data_ram_in[4] = 1'b1;
end 
// data_ram_in[ 3 ]
initial
begin
	data_ram_in[3] = 1'b1;
end 
// data_ram_in[ 2 ]
initial
begin
	data_ram_in[2] = 1'b1;
end 
// data_ram_in[ 1 ]
initial
begin
	data_ram_in[1] = 1'b1;
end 
// data_ram_in[ 0 ]
initial
begin
	data_ram_in[0] = 1'b1;
end 
// RF_W_data[ 7 ]
initial
begin
	RF_W_data[7] = 1'b0;
end 
// RF_W_data[ 6 ]
initial
begin
	RF_W_data[6] = 1'b0;
end 
// RF_W_data[ 5 ]
initial
begin
	RF_W_data[5] = 1'b0;
end 
// RF_W_data[ 4 ]
initial
begin
	RF_W_data[4] = 1'b0;
end 
// RF_W_data[ 3 ]
initial
begin
	RF_W_data[3] = 1'b0;
end 
// RF_W_data[ 2 ]
initial
begin
	RF_W_data[2] = 1'b0;
end 
// RF_W_data[ 1 ]
initial
begin
	RF_W_data[1] = 1'b0;
end 
// RF_W_data[ 0 ]
initial
begin
	RF_W_data[0] = 1'b0;
end 

// RF_s0
initial
begin
	RF_s0 = 1'b1;
	RF_s0 = #500000 1'b0;
end 

// RF_s1
initial
begin
	RF_s1 = 1'b0;
end 
// RF_W_addr[ 3 ]
initial
begin
	RF_W_addr[3] = 1'b0;
end 
// RF_W_addr[ 2 ]
initial
begin
	RF_W_addr[2] = 1'b0;
end 
// RF_W_addr[ 1 ]
initial
begin
	RF_W_addr[1] = 1'b0;
end 
// RF_W_addr[ 0 ]
initial
begin
	RF_W_addr[0] = 1'b0;
end 

// RF_W_wr
initial
begin
	RF_W_wr = 1'b1;
end 
// RF_Rp_addr[ 3 ]
initial
begin
	RF_Rp_addr[3] = 1'b0;
end 
// RF_Rp_addr[ 2 ]
initial
begin
	RF_Rp_addr[2] = 1'b0;
end 
// RF_Rp_addr[ 1 ]
initial
begin
	RF_Rp_addr[1] = 1'b0;
end 
// RF_Rp_addr[ 0 ]
initial
begin
	RF_Rp_addr[0] = 1'b0;
end 

// RF_Rp_rd
initial
begin
	RF_Rp_rd = 1'b1;
end 
// RF_Rq_addr[ 3 ]
initial
begin
	RF_Rq_addr[3] = 1'b0;
end 
// RF_Rq_addr[ 2 ]
initial
begin
	RF_Rq_addr[2] = 1'b0;
end 
// RF_Rq_addr[ 1 ]
initial
begin
	RF_Rq_addr[1] = 1'b0;
end 
// RF_Rq_addr[ 0 ]
initial
begin
	RF_Rq_addr[0] = 1'b0;
end 

// RF_Rq_rd
initial
begin
	RF_Rq_rd = 1'b1;
end 

// alu_s1
initial
begin
	alu_s1 = 1'b1;
end 

// alu_s0
initial
begin
	alu_s0 = 1'b1;
end 

datapath_vlg_sample_tst tb_sample (
	.alu_s0(alu_s0),
	.alu_s1(alu_s1),
	.clk(clk),
	.data_ram_in(data_ram_in),
	.RF_Rp_addr(RF_Rp_addr),
	.RF_Rp_rd(RF_Rp_rd),
	.RF_Rq_addr(RF_Rq_addr),
	.RF_Rq_rd(RF_Rq_rd),
	.RF_s0(RF_s0),
	.RF_s1(RF_s1),
	.RF_W_addr(RF_W_addr),
	.RF_W_data(RF_W_data),
	.RF_W_wr(RF_W_wr),
	.sampler_tx(sampler)
);

datapath_vlg_check_tst tb_out(
	.alu_comp_gt(alu_comp_gt),
	.data_ram_out(data_ram_out),
	.RF_Rp_zero(RF_Rp_zero),
	.sampler_rx(sampler)
);
endmodule

