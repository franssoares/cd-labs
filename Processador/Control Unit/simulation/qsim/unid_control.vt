// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/19/2023 05:45:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    unid_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module unid_control_vlg_sample_tst(
	clk,
	comp_ab,
	data_rom,
	rf_rp_zero,
	sampler_tx
);
input  clk;
input  comp_ab;
input [15:0] data_rom;
input  rf_rp_zero;
output sampler_tx;

reg sample;
time current_time;
always @(clk or comp_ab or data_rom or rf_rp_zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module unid_control_vlg_check_tst (
	alu_s0,
	alu_s1,
	d_addr,
	d_rd,
	d_wr,
	pc_addr,
	rd,
	rf_rp_addr,
	rf_rp_rd,
	rf_rq_addr,
	rf_rq_rd,
	rf_s0,
	rf_s1,
	rf_w_addr,
	rf_w_data,
	rf_w_wr,
	sampler_rx
);
input  alu_s0;
input  alu_s1;
input [7:0] d_addr;
input  d_rd;
input  d_wr;
input [3:0] pc_addr;
input  rd;
input [3:0] rf_rp_addr;
input  rf_rp_rd;
input [3:0] rf_rq_addr;
input  rf_rq_rd;
input  rf_s0;
input  rf_s1;
input [3:0] rf_w_addr;
input [7:0] rf_w_data;
input  rf_w_wr;
input sampler_rx;

reg  alu_s0_expected;
reg  alu_s1_expected;
reg [7:0] d_addr_expected;
reg  d_rd_expected;
reg  d_wr_expected;
reg [3:0] pc_addr_expected;
reg  rd_expected;
reg [3:0] rf_rp_addr_expected;
reg  rf_rp_rd_expected;
reg [3:0] rf_rq_addr_expected;
reg  rf_rq_rd_expected;
reg  rf_s0_expected;
reg  rf_s1_expected;
reg [3:0] rf_w_addr_expected;
reg [7:0] rf_w_data_expected;
reg  rf_w_wr_expected;

reg  alu_s0_prev;
reg  alu_s1_prev;
reg [7:0] d_addr_prev;
reg  d_rd_prev;
reg  d_wr_prev;
reg [3:0] pc_addr_prev;
reg  rd_prev;
reg [3:0] rf_rp_addr_prev;
reg  rf_rp_rd_prev;
reg [3:0] rf_rq_addr_prev;
reg  rf_rq_rd_prev;
reg  rf_s0_prev;
reg  rf_s1_prev;
reg [3:0] rf_w_addr_prev;
reg [7:0] rf_w_data_prev;
reg  rf_w_wr_prev;

reg  alu_s0_expected_prev;
reg  alu_s1_expected_prev;
reg [7:0] d_addr_expected_prev;
reg  d_rd_expected_prev;
reg  d_wr_expected_prev;
reg [3:0] pc_addr_expected_prev;
reg  rd_expected_prev;
reg [3:0] rf_rp_addr_expected_prev;
reg  rf_rp_rd_expected_prev;
reg [3:0] rf_rq_addr_expected_prev;
reg  rf_rq_rd_expected_prev;
reg  rf_s0_expected_prev;
reg  rf_s1_expected_prev;
reg [3:0] rf_w_addr_expected_prev;
reg [7:0] rf_w_data_expected_prev;
reg  rf_w_wr_expected_prev;

reg  last_alu_s0_exp;
reg  last_alu_s1_exp;
reg [7:0] last_d_addr_exp;
reg  last_d_rd_exp;
reg  last_d_wr_exp;
reg [3:0] last_pc_addr_exp;
reg  last_rd_exp;
reg [3:0] last_rf_rp_addr_exp;
reg  last_rf_rp_rd_exp;
reg [3:0] last_rf_rq_addr_exp;
reg  last_rf_rq_rd_exp;
reg  last_rf_s0_exp;
reg  last_rf_s1_exp;
reg [3:0] last_rf_w_addr_exp;
reg [7:0] last_rf_w_data_exp;
reg  last_rf_w_wr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_s0_prev = alu_s0;
	alu_s1_prev = alu_s1;
	d_addr_prev = d_addr;
	d_rd_prev = d_rd;
	d_wr_prev = d_wr;
	pc_addr_prev = pc_addr;
	rd_prev = rd;
	rf_rp_addr_prev = rf_rp_addr;
	rf_rp_rd_prev = rf_rp_rd;
	rf_rq_addr_prev = rf_rq_addr;
	rf_rq_rd_prev = rf_rq_rd;
	rf_s0_prev = rf_s0;
	rf_s1_prev = rf_s1;
	rf_w_addr_prev = rf_w_addr;
	rf_w_data_prev = rf_w_data;
	rf_w_wr_prev = rf_w_wr;
end

// update expected /o prevs

always @(trigger)
begin
	alu_s0_expected_prev = alu_s0_expected;
	alu_s1_expected_prev = alu_s1_expected;
	d_addr_expected_prev = d_addr_expected;
	d_rd_expected_prev = d_rd_expected;
	d_wr_expected_prev = d_wr_expected;
	pc_addr_expected_prev = pc_addr_expected;
	rd_expected_prev = rd_expected;
	rf_rp_addr_expected_prev = rf_rp_addr_expected;
	rf_rp_rd_expected_prev = rf_rp_rd_expected;
	rf_rq_addr_expected_prev = rf_rq_addr_expected;
	rf_rq_rd_expected_prev = rf_rq_rd_expected;
	rf_s0_expected_prev = rf_s0_expected;
	rf_s1_expected_prev = rf_s1_expected;
	rf_w_addr_expected_prev = rf_w_addr_expected;
	rf_w_data_expected_prev = rf_w_data_expected;
	rf_w_wr_expected_prev = rf_w_wr_expected;
end



// expected alu_s0
initial
begin
	alu_s0_expected = 1'bX;
end 

// expected alu_s1
initial
begin
	alu_s1_expected = 1'bX;
end 
// expected d_addr[ 7 ]
initial
begin
	d_addr_expected[7] = 1'bX;
end 
// expected d_addr[ 6 ]
initial
begin
	d_addr_expected[6] = 1'bX;
end 
// expected d_addr[ 5 ]
initial
begin
	d_addr_expected[5] = 1'bX;
end 
// expected d_addr[ 4 ]
initial
begin
	d_addr_expected[4] = 1'bX;
end 
// expected d_addr[ 3 ]
initial
begin
	d_addr_expected[3] = 1'bX;
end 
// expected d_addr[ 2 ]
initial
begin
	d_addr_expected[2] = 1'bX;
end 
// expected d_addr[ 1 ]
initial
begin
	d_addr_expected[1] = 1'bX;
end 
// expected d_addr[ 0 ]
initial
begin
	d_addr_expected[0] = 1'bX;
end 

// expected d_rd
initial
begin
	d_rd_expected = 1'bX;
end 

// expected d_wr
initial
begin
	d_wr_expected = 1'bX;
end 
// expected pc_addr[ 3 ]
initial
begin
	pc_addr_expected[3] = 1'bX;
end 
// expected pc_addr[ 2 ]
initial
begin
	pc_addr_expected[2] = 1'bX;
end 
// expected pc_addr[ 1 ]
initial
begin
	pc_addr_expected[1] = 1'bX;
end 
// expected pc_addr[ 0 ]
initial
begin
	pc_addr_expected[0] = 1'bX;
end 

// expected rd
initial
begin
	rd_expected = 1'bX;
end 
// expected rf_rp_addr[ 3 ]
initial
begin
	rf_rp_addr_expected[3] = 1'bX;
end 
// expected rf_rp_addr[ 2 ]
initial
begin
	rf_rp_addr_expected[2] = 1'bX;
end 
// expected rf_rp_addr[ 1 ]
initial
begin
	rf_rp_addr_expected[1] = 1'bX;
end 
// expected rf_rp_addr[ 0 ]
initial
begin
	rf_rp_addr_expected[0] = 1'bX;
end 

// expected rf_rp_rd
initial
begin
	rf_rp_rd_expected = 1'bX;
end 
// expected rf_rq_addr[ 3 ]
initial
begin
	rf_rq_addr_expected[3] = 1'bX;
end 
// expected rf_rq_addr[ 2 ]
initial
begin
	rf_rq_addr_expected[2] = 1'bX;
end 
// expected rf_rq_addr[ 1 ]
initial
begin
	rf_rq_addr_expected[1] = 1'bX;
end 
// expected rf_rq_addr[ 0 ]
initial
begin
	rf_rq_addr_expected[0] = 1'bX;
end 

// expected rf_rq_rd
initial
begin
	rf_rq_rd_expected = 1'bX;
end 

// expected rf_s0
initial
begin
	rf_s0_expected = 1'bX;
end 

// expected rf_s1
initial
begin
	rf_s1_expected = 1'bX;
end 
// expected rf_w_addr[ 3 ]
initial
begin
	rf_w_addr_expected[3] = 1'bX;
end 
// expected rf_w_addr[ 2 ]
initial
begin
	rf_w_addr_expected[2] = 1'bX;
end 
// expected rf_w_addr[ 1 ]
initial
begin
	rf_w_addr_expected[1] = 1'bX;
end 
// expected rf_w_addr[ 0 ]
initial
begin
	rf_w_addr_expected[0] = 1'bX;
end 
// expected rf_w_data[ 7 ]
initial
begin
	rf_w_data_expected[7] = 1'bX;
end 
// expected rf_w_data[ 6 ]
initial
begin
	rf_w_data_expected[6] = 1'bX;
end 
// expected rf_w_data[ 5 ]
initial
begin
	rf_w_data_expected[5] = 1'bX;
end 
// expected rf_w_data[ 4 ]
initial
begin
	rf_w_data_expected[4] = 1'bX;
end 
// expected rf_w_data[ 3 ]
initial
begin
	rf_w_data_expected[3] = 1'bX;
end 
// expected rf_w_data[ 2 ]
initial
begin
	rf_w_data_expected[2] = 1'bX;
end 
// expected rf_w_data[ 1 ]
initial
begin
	rf_w_data_expected[1] = 1'bX;
end 
// expected rf_w_data[ 0 ]
initial
begin
	rf_w_data_expected[0] = 1'bX;
end 

// expected rf_w_wr
initial
begin
	rf_w_wr_expected = 1'bX;
end 
// generate trigger
always @(alu_s0_expected or alu_s0 or alu_s1_expected or alu_s1 or d_addr_expected or d_addr or d_rd_expected or d_rd or d_wr_expected or d_wr or pc_addr_expected or pc_addr or rd_expected or rd or rf_rp_addr_expected or rf_rp_addr or rf_rp_rd_expected or rf_rp_rd or rf_rq_addr_expected or rf_rq_addr or rf_rq_rd_expected or rf_rq_rd or rf_s0_expected or rf_s0 or rf_s1_expected or rf_s1 or rf_w_addr_expected or rf_w_addr or rf_w_data_expected or rf_w_data or rf_w_wr_expected or rf_w_wr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_s0 = %b | expected alu_s1 = %b | expected d_addr = %b | expected d_rd = %b | expected d_wr = %b | expected pc_addr = %b | expected rd = %b | expected rf_rp_addr = %b | expected rf_rp_rd = %b | expected rf_rq_addr = %b | expected rf_rq_rd = %b | expected rf_s0 = %b | expected rf_s1 = %b | expected rf_w_addr = %b | expected rf_w_data = %b | expected rf_w_wr = %b | ",alu_s0_expected_prev,alu_s1_expected_prev,d_addr_expected_prev,d_rd_expected_prev,d_wr_expected_prev,pc_addr_expected_prev,rd_expected_prev,rf_rp_addr_expected_prev,rf_rp_rd_expected_prev,rf_rq_addr_expected_prev,rf_rq_rd_expected_prev,rf_s0_expected_prev,rf_s1_expected_prev,rf_w_addr_expected_prev,rf_w_data_expected_prev,rf_w_wr_expected_prev);
	$display("| real alu_s0 = %b | real alu_s1 = %b | real d_addr = %b | real d_rd = %b | real d_wr = %b | real pc_addr = %b | real rd = %b | real rf_rp_addr = %b | real rf_rp_rd = %b | real rf_rq_addr = %b | real rf_rq_rd = %b | real rf_s0 = %b | real rf_s1 = %b | real rf_w_addr = %b | real rf_w_data = %b | real rf_w_wr = %b | ",alu_s0_prev,alu_s1_prev,d_addr_prev,d_rd_prev,d_wr_prev,pc_addr_prev,rd_prev,rf_rp_addr_prev,rf_rp_rd_prev,rf_rq_addr_prev,rf_rq_rd_prev,rf_s0_prev,rf_s1_prev,rf_w_addr_prev,rf_w_data_prev,rf_w_wr_prev);
`endif
	if (
		( alu_s0_expected_prev !== 1'bx ) && ( alu_s0_prev !== alu_s0_expected_prev )
		&& ((alu_s0_expected_prev !== last_alu_s0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s0_expected_prev);
		$display ("     Real value = %b", alu_s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_s0_exp = alu_s0_expected_prev;
	end
	if (
		( alu_s1_expected_prev !== 1'bx ) && ( alu_s1_prev !== alu_s1_expected_prev )
		&& ((alu_s1_expected_prev !== last_alu_s1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s1_expected_prev);
		$display ("     Real value = %b", alu_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_s1_exp = alu_s1_expected_prev;
	end
	if (
		( d_addr_expected_prev[0] !== 1'bx ) && ( d_addr_prev[0] !== d_addr_expected_prev[0] )
		&& ((d_addr_expected_prev[0] !== last_d_addr_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_addr_expected_prev);
		$display ("     Real value = %b", d_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d_addr_exp[0] = d_addr_expected_prev[0];
	end
	if (
		( d_addr_expected_prev[1] !== 1'bx ) && ( d_addr_prev[1] !== d_addr_expected_prev[1] )
		&& ((d_addr_expected_prev[1] !== last_d_addr_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_addr_expected_prev);
		$display ("     Real value = %b", d_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d_addr_exp[1] = d_addr_expected_prev[1];
	end
	if (
		( d_addr_expected_prev[2] !== 1'bx ) && ( d_addr_prev[2] !== d_addr_expected_prev[2] )
		&& ((d_addr_expected_prev[2] !== last_d_addr_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_addr_expected_prev);
		$display ("     Real value = %b", d_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d_addr_exp[2] = d_addr_expected_prev[2];
	end
	if (
		( d_addr_expected_prev[3] !== 1'bx ) && ( d_addr_prev[3] !== d_addr_expected_prev[3] )
		&& ((d_addr_expected_prev[3] !== last_d_addr_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_addr_expected_prev);
		$display ("     Real value = %b", d_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d_addr_exp[3] = d_addr_expected_prev[3];
	end
	if (
		( d_addr_expected_prev[4] !== 1'bx ) && ( d_addr_prev[4] !== d_addr_expected_prev[4] )
		&& ((d_addr_expected_prev[4] !== last_d_addr_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_addr_expected_prev);
		$display ("     Real value = %b", d_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d_addr_exp[4] = d_addr_expected_prev[4];
	end
	if (
		( d_addr_expected_prev[5] !== 1'bx ) && ( d_addr_prev[5] !== d_addr_expected_prev[5] )
		&& ((d_addr_expected_prev[5] !== last_d_addr_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_addr_expected_prev);
		$display ("     Real value = %b", d_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d_addr_exp[5] = d_addr_expected_prev[5];
	end
	if (
		( d_addr_expected_prev[6] !== 1'bx ) && ( d_addr_prev[6] !== d_addr_expected_prev[6] )
		&& ((d_addr_expected_prev[6] !== last_d_addr_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_addr_expected_prev);
		$display ("     Real value = %b", d_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d_addr_exp[6] = d_addr_expected_prev[6];
	end
	if (
		( d_addr_expected_prev[7] !== 1'bx ) && ( d_addr_prev[7] !== d_addr_expected_prev[7] )
		&& ((d_addr_expected_prev[7] !== last_d_addr_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_addr_expected_prev);
		$display ("     Real value = %b", d_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d_addr_exp[7] = d_addr_expected_prev[7];
	end
	if (
		( d_rd_expected_prev !== 1'bx ) && ( d_rd_prev !== d_rd_expected_prev )
		&& ((d_rd_expected_prev !== last_d_rd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_rd_expected_prev);
		$display ("     Real value = %b", d_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d_rd_exp = d_rd_expected_prev;
	end
	if (
		( d_wr_expected_prev !== 1'bx ) && ( d_wr_prev !== d_wr_expected_prev )
		&& ((d_wr_expected_prev !== last_d_wr_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_wr_expected_prev);
		$display ("     Real value = %b", d_wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_d_wr_exp = d_wr_expected_prev;
	end
	if (
		( pc_addr_expected_prev[0] !== 1'bx ) && ( pc_addr_prev[0] !== pc_addr_expected_prev[0] )
		&& ((pc_addr_expected_prev[0] !== last_pc_addr_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_addr_expected_prev);
		$display ("     Real value = %b", pc_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_addr_exp[0] = pc_addr_expected_prev[0];
	end
	if (
		( pc_addr_expected_prev[1] !== 1'bx ) && ( pc_addr_prev[1] !== pc_addr_expected_prev[1] )
		&& ((pc_addr_expected_prev[1] !== last_pc_addr_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_addr_expected_prev);
		$display ("     Real value = %b", pc_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_addr_exp[1] = pc_addr_expected_prev[1];
	end
	if (
		( pc_addr_expected_prev[2] !== 1'bx ) && ( pc_addr_prev[2] !== pc_addr_expected_prev[2] )
		&& ((pc_addr_expected_prev[2] !== last_pc_addr_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_addr_expected_prev);
		$display ("     Real value = %b", pc_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_addr_exp[2] = pc_addr_expected_prev[2];
	end
	if (
		( pc_addr_expected_prev[3] !== 1'bx ) && ( pc_addr_prev[3] !== pc_addr_expected_prev[3] )
		&& ((pc_addr_expected_prev[3] !== last_pc_addr_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_addr_expected_prev);
		$display ("     Real value = %b", pc_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_addr_exp[3] = pc_addr_expected_prev[3];
	end
	if (
		( rd_expected_prev !== 1'bx ) && ( rd_prev !== rd_expected_prev )
		&& ((rd_expected_prev !== last_rd_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_rd_exp = rd_expected_prev;
	end
	if (
		( rf_rp_addr_expected_prev[0] !== 1'bx ) && ( rf_rp_addr_prev[0] !== rf_rp_addr_expected_prev[0] )
		&& ((rf_rp_addr_expected_prev[0] !== last_rf_rp_addr_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rp_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rp_addr_expected_prev);
		$display ("     Real value = %b", rf_rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_rf_rp_addr_exp[0] = rf_rp_addr_expected_prev[0];
	end
	if (
		( rf_rp_addr_expected_prev[1] !== 1'bx ) && ( rf_rp_addr_prev[1] !== rf_rp_addr_expected_prev[1] )
		&& ((rf_rp_addr_expected_prev[1] !== last_rf_rp_addr_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rp_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rp_addr_expected_prev);
		$display ("     Real value = %b", rf_rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_rf_rp_addr_exp[1] = rf_rp_addr_expected_prev[1];
	end
	if (
		( rf_rp_addr_expected_prev[2] !== 1'bx ) && ( rf_rp_addr_prev[2] !== rf_rp_addr_expected_prev[2] )
		&& ((rf_rp_addr_expected_prev[2] !== last_rf_rp_addr_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rp_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rp_addr_expected_prev);
		$display ("     Real value = %b", rf_rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_rf_rp_addr_exp[2] = rf_rp_addr_expected_prev[2];
	end
	if (
		( rf_rp_addr_expected_prev[3] !== 1'bx ) && ( rf_rp_addr_prev[3] !== rf_rp_addr_expected_prev[3] )
		&& ((rf_rp_addr_expected_prev[3] !== last_rf_rp_addr_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rp_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rp_addr_expected_prev);
		$display ("     Real value = %b", rf_rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_rf_rp_addr_exp[3] = rf_rp_addr_expected_prev[3];
	end
	if (
		( rf_rp_rd_expected_prev !== 1'bx ) && ( rf_rp_rd_prev !== rf_rp_rd_expected_prev )
		&& ((rf_rp_rd_expected_prev !== last_rf_rp_rd_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rp_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rp_rd_expected_prev);
		$display ("     Real value = %b", rf_rp_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rf_rp_rd_exp = rf_rp_rd_expected_prev;
	end
	if (
		( rf_rq_addr_expected_prev[0] !== 1'bx ) && ( rf_rq_addr_prev[0] !== rf_rq_addr_expected_prev[0] )
		&& ((rf_rq_addr_expected_prev[0] !== last_rf_rq_addr_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rq_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rq_addr_expected_prev);
		$display ("     Real value = %b", rf_rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rf_rq_addr_exp[0] = rf_rq_addr_expected_prev[0];
	end
	if (
		( rf_rq_addr_expected_prev[1] !== 1'bx ) && ( rf_rq_addr_prev[1] !== rf_rq_addr_expected_prev[1] )
		&& ((rf_rq_addr_expected_prev[1] !== last_rf_rq_addr_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rq_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rq_addr_expected_prev);
		$display ("     Real value = %b", rf_rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rf_rq_addr_exp[1] = rf_rq_addr_expected_prev[1];
	end
	if (
		( rf_rq_addr_expected_prev[2] !== 1'bx ) && ( rf_rq_addr_prev[2] !== rf_rq_addr_expected_prev[2] )
		&& ((rf_rq_addr_expected_prev[2] !== last_rf_rq_addr_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rq_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rq_addr_expected_prev);
		$display ("     Real value = %b", rf_rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rf_rq_addr_exp[2] = rf_rq_addr_expected_prev[2];
	end
	if (
		( rf_rq_addr_expected_prev[3] !== 1'bx ) && ( rf_rq_addr_prev[3] !== rf_rq_addr_expected_prev[3] )
		&& ((rf_rq_addr_expected_prev[3] !== last_rf_rq_addr_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rq_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rq_addr_expected_prev);
		$display ("     Real value = %b", rf_rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rf_rq_addr_exp[3] = rf_rq_addr_expected_prev[3];
	end
	if (
		( rf_rq_rd_expected_prev !== 1'bx ) && ( rf_rq_rd_prev !== rf_rq_rd_expected_prev )
		&& ((rf_rq_rd_expected_prev !== last_rf_rq_rd_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_rq_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_rq_rd_expected_prev);
		$display ("     Real value = %b", rf_rq_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rf_rq_rd_exp = rf_rq_rd_expected_prev;
	end
	if (
		( rf_s0_expected_prev !== 1'bx ) && ( rf_s0_prev !== rf_s0_expected_prev )
		&& ((rf_s0_expected_prev !== last_rf_s0_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_s0_expected_prev);
		$display ("     Real value = %b", rf_s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rf_s0_exp = rf_s0_expected_prev;
	end
	if (
		( rf_s1_expected_prev !== 1'bx ) && ( rf_s1_prev !== rf_s1_expected_prev )
		&& ((rf_s1_expected_prev !== last_rf_s1_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_s1_expected_prev);
		$display ("     Real value = %b", rf_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_rf_s1_exp = rf_s1_expected_prev;
	end
	if (
		( rf_w_addr_expected_prev[0] !== 1'bx ) && ( rf_w_addr_prev[0] !== rf_w_addr_expected_prev[0] )
		&& ((rf_w_addr_expected_prev[0] !== last_rf_w_addr_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_addr_expected_prev);
		$display ("     Real value = %b", rf_w_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_rf_w_addr_exp[0] = rf_w_addr_expected_prev[0];
	end
	if (
		( rf_w_addr_expected_prev[1] !== 1'bx ) && ( rf_w_addr_prev[1] !== rf_w_addr_expected_prev[1] )
		&& ((rf_w_addr_expected_prev[1] !== last_rf_w_addr_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_addr_expected_prev);
		$display ("     Real value = %b", rf_w_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_rf_w_addr_exp[1] = rf_w_addr_expected_prev[1];
	end
	if (
		( rf_w_addr_expected_prev[2] !== 1'bx ) && ( rf_w_addr_prev[2] !== rf_w_addr_expected_prev[2] )
		&& ((rf_w_addr_expected_prev[2] !== last_rf_w_addr_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_addr_expected_prev);
		$display ("     Real value = %b", rf_w_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_rf_w_addr_exp[2] = rf_w_addr_expected_prev[2];
	end
	if (
		( rf_w_addr_expected_prev[3] !== 1'bx ) && ( rf_w_addr_prev[3] !== rf_w_addr_expected_prev[3] )
		&& ((rf_w_addr_expected_prev[3] !== last_rf_w_addr_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_addr_expected_prev);
		$display ("     Real value = %b", rf_w_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_rf_w_addr_exp[3] = rf_w_addr_expected_prev[3];
	end
	if (
		( rf_w_data_expected_prev[0] !== 1'bx ) && ( rf_w_data_prev[0] !== rf_w_data_expected_prev[0] )
		&& ((rf_w_data_expected_prev[0] !== last_rf_w_data_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_data_expected_prev);
		$display ("     Real value = %b", rf_w_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_rf_w_data_exp[0] = rf_w_data_expected_prev[0];
	end
	if (
		( rf_w_data_expected_prev[1] !== 1'bx ) && ( rf_w_data_prev[1] !== rf_w_data_expected_prev[1] )
		&& ((rf_w_data_expected_prev[1] !== last_rf_w_data_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_data_expected_prev);
		$display ("     Real value = %b", rf_w_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_rf_w_data_exp[1] = rf_w_data_expected_prev[1];
	end
	if (
		( rf_w_data_expected_prev[2] !== 1'bx ) && ( rf_w_data_prev[2] !== rf_w_data_expected_prev[2] )
		&& ((rf_w_data_expected_prev[2] !== last_rf_w_data_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_data_expected_prev);
		$display ("     Real value = %b", rf_w_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_rf_w_data_exp[2] = rf_w_data_expected_prev[2];
	end
	if (
		( rf_w_data_expected_prev[3] !== 1'bx ) && ( rf_w_data_prev[3] !== rf_w_data_expected_prev[3] )
		&& ((rf_w_data_expected_prev[3] !== last_rf_w_data_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_data_expected_prev);
		$display ("     Real value = %b", rf_w_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_rf_w_data_exp[3] = rf_w_data_expected_prev[3];
	end
	if (
		( rf_w_data_expected_prev[4] !== 1'bx ) && ( rf_w_data_prev[4] !== rf_w_data_expected_prev[4] )
		&& ((rf_w_data_expected_prev[4] !== last_rf_w_data_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_data_expected_prev);
		$display ("     Real value = %b", rf_w_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_rf_w_data_exp[4] = rf_w_data_expected_prev[4];
	end
	if (
		( rf_w_data_expected_prev[5] !== 1'bx ) && ( rf_w_data_prev[5] !== rf_w_data_expected_prev[5] )
		&& ((rf_w_data_expected_prev[5] !== last_rf_w_data_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_data_expected_prev);
		$display ("     Real value = %b", rf_w_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_rf_w_data_exp[5] = rf_w_data_expected_prev[5];
	end
	if (
		( rf_w_data_expected_prev[6] !== 1'bx ) && ( rf_w_data_prev[6] !== rf_w_data_expected_prev[6] )
		&& ((rf_w_data_expected_prev[6] !== last_rf_w_data_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_data_expected_prev);
		$display ("     Real value = %b", rf_w_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_rf_w_data_exp[6] = rf_w_data_expected_prev[6];
	end
	if (
		( rf_w_data_expected_prev[7] !== 1'bx ) && ( rf_w_data_prev[7] !== rf_w_data_expected_prev[7] )
		&& ((rf_w_data_expected_prev[7] !== last_rf_w_data_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_data_expected_prev);
		$display ("     Real value = %b", rf_w_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_rf_w_data_exp[7] = rf_w_data_expected_prev[7];
	end
	if (
		( rf_w_wr_expected_prev !== 1'bx ) && ( rf_w_wr_prev !== rf_w_wr_expected_prev )
		&& ((rf_w_wr_expected_prev !== last_rf_w_wr_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rf_w_wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rf_w_wr_expected_prev);
		$display ("     Real value = %b", rf_w_wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rf_w_wr_exp = rf_w_wr_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module unid_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg comp_ab;
reg [15:0] data_rom;
reg rf_rp_zero;
// wires                                               
wire alu_s0;
wire alu_s1;
wire [7:0] d_addr;
wire d_rd;
wire d_wr;
wire [3:0] pc_addr;
wire rd;
wire [3:0] rf_rp_addr;
wire rf_rp_rd;
wire [3:0] rf_rq_addr;
wire rf_rq_rd;
wire rf_s0;
wire rf_s1;
wire [3:0] rf_w_addr;
wire [7:0] rf_w_data;
wire rf_w_wr;

wire sampler;                             

// assign statements (if any)                          
unid_control i1 (
// port map - connection between master ports and signals/registers   
	.alu_s0(alu_s0),
	.alu_s1(alu_s1),
	.clk(clk),
	.comp_ab(comp_ab),
	.d_addr(d_addr),
	.d_rd(d_rd),
	.d_wr(d_wr),
	.data_rom(data_rom),
	.pc_addr(pc_addr),
	.rd(rd),
	.rf_rp_addr(rf_rp_addr),
	.rf_rp_rd(rf_rp_rd),
	.rf_rp_zero(rf_rp_zero),
	.rf_rq_addr(rf_rq_addr),
	.rf_rq_rd(rf_rq_rd),
	.rf_s0(rf_s0),
	.rf_s1(rf_s1),
	.rf_w_addr(rf_w_addr),
	.rf_w_data(rf_w_data),
	.rf_w_wr(rf_w_wr)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// comp_ab
initial
begin
	comp_ab = 1'b0;
end 
// data_rom[ 15 ]
initial
begin
	data_rom[15] = 1'b0;
end 
// data_rom[ 14 ]
initial
begin
	data_rom[14] = 1'b0;
end 
// data_rom[ 13 ]
initial
begin
	data_rom[13] = 1'b1;
end 
// data_rom[ 12 ]
initial
begin
	data_rom[12] = 1'b1;
end 
// data_rom[ 11 ]
initial
begin
	data_rom[11] = 1'b0;
end 
// data_rom[ 10 ]
initial
begin
	data_rom[10] = 1'b0;
end 
// data_rom[ 9 ]
initial
begin
	data_rom[9] = 1'b0;
end 
// data_rom[ 8 ]
initial
begin
	data_rom[8] = 1'b0;
end 
// data_rom[ 7 ]
initial
begin
	data_rom[7] = 1'b0;
end 
// data_rom[ 6 ]
initial
begin
	data_rom[6] = 1'b0;
end 
// data_rom[ 5 ]
initial
begin
	data_rom[5] = 1'b0;
end 
// data_rom[ 4 ]
initial
begin
	data_rom[4] = 1'b0;
end 
// data_rom[ 3 ]
initial
begin
	data_rom[3] = 1'b0;
end 
// data_rom[ 2 ]
initial
begin
	data_rom[2] = 1'b0;
end 
// data_rom[ 1 ]
initial
begin
	data_rom[1] = 1'b1;
end 
// data_rom[ 0 ]
initial
begin
	data_rom[0] = 1'b0;
end 

// rf_rp_zero
initial
begin
	rf_rp_zero = 1'b0;
end 

unid_control_vlg_sample_tst tb_sample (
	.clk(clk),
	.comp_ab(comp_ab),
	.data_rom(data_rom),
	.rf_rp_zero(rf_rp_zero),
	.sampler_tx(sampler)
);

unid_control_vlg_check_tst tb_out(
	.alu_s0(alu_s0),
	.alu_s1(alu_s1),
	.d_addr(d_addr),
	.d_rd(d_rd),
	.d_wr(d_wr),
	.pc_addr(pc_addr),
	.rd(rd),
	.rf_rp_addr(rf_rp_addr),
	.rf_rp_rd(rf_rp_rd),
	.rf_rq_addr(rf_rq_addr),
	.rf_rq_rd(rf_rq_rd),
	.rf_s0(rf_s0),
	.rf_s1(rf_s1),
	.rf_w_addr(rf_w_addr),
	.rf_w_data(rf_w_data),
	.rf_w_wr(rf_w_wr),
	.sampler_rx(sampler)
);
endmodule

